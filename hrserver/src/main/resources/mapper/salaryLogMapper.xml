<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cn.ncvt.mapper.salaryLogMapper" >
  <resultMap id="BaseResultMap" type="com.cn.ncvt.entity.salaryLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="eid" property="eid" jdbcType="INTEGER" />
    <result column="befBaseSalary" property="befBaseSalary" jdbcType="DOUBLE" />
    <result column="afterBaseSalary" property="befBaseSalary" jdbcType="DOUBLE" />
    <result column="befMeritSalary" property="befMeritSalary" jdbcType="DOUBLE" />
    <result column="afterMeritSalary" property="afterMeritSalary" jdbcType="DOUBLE" />
    <result column="date" property="date" jdbcType="DATE" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, eid, befBaseSalary, afterBaseSalary, befMeritSalary, afterMeritSalary, date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from salary_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from salary_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cn.ncvt.entity.salaryLog" >
    insert into salary_log (id, eid, befBaseSalary, 
      afterBaseSalary, befMeritSalary, afterMeritSalary, 
      date)
    values (#{id,jdbcType=INTEGER}, #{eid,jdbcType=INTEGER}, #{befBaseSalary,jdbcType=DOUBLE},
      #{befBaseSalary,jdbcType=DOUBLE}, #{befMeritSalary,jdbcType=DOUBLE}, #{afterMeritSalary,jdbcType=DOUBLE},
      #{date,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" parameterType="com.cn.ncvt.entity.salaryLog" >
    insert into salary_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="eid != null" >
        eid,
      </if>
      <if test="befBaseSalary != null" >
        befBaseSalary,
      </if>
      <if test="befBaseSalary != null" >
        afterBaseSalary,
      </if>
      <if test="befMeritSalary != null" >
        befMeritSalary,
      </if>
      <if test="afterMeritSalary != null" >
        afterMeritSalary,
      </if>
      <if test="date != null" >
        date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="eid != null" >
        #{eid,jdbcType=INTEGER},
      </if>
      <if test="befBaseSalary != null" >
        #{befBaseSalary,jdbcType=DOUBLE},
      </if>
      <if test="befBaseSalary != null" >
        #{befBaseSalary,jdbcType=DOUBLE},
      </if>
      <if test="befMeritSalary != null" >
        #{befMeritSalary,jdbcType=DOUBLE},
      </if>
      <if test="afterMeritSalary != null" >
        #{afterMeritSalary,jdbcType=DOUBLE},
      </if>
      <if test="date != null" >
        #{date,jdbcType=DATE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cn.ncvt.entity.salaryLog" >
    update salary_log
    <set >
      <if test="eid != null" >
        eid = #{eid,jdbcType=INTEGER},
      </if>
      <if test="befBaseSalary != null" >
        befBaseSalary = #{befBaseSalary,jdbcType=DOUBLE},
      </if>
      <if test="befBaseSalary != null" >
        afterBaseSalary = #{befBaseSalary,jdbcType=DOUBLE},
      </if>
      <if test="befMeritSalary != null" >
        befMeritSalary = #{befMeritSalary,jdbcType=DOUBLE},
      </if>
      <if test="afterMeritSalary != null" >
        afterMeritSalary = #{afterMeritSalary,jdbcType=DOUBLE},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=DATE},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cn.ncvt.entity.salaryLog" >
    update salary_log
    set eid = #{eid,jdbcType=INTEGER},
      befBaseSalary = #{befBaseSalary,jdbcType=DOUBLE},
      afterBaseSalary = #{befBaseSalary,jdbcType=DOUBLE},
      befMeritSalary = #{befMeritSalary,jdbcType=DOUBLE},
      afterMeritSalary = #{afterMeritSalary,jdbcType=DOUBLE},
      date = #{date,jdbcType=DATE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>